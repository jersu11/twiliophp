<?php
/**
 * @file
 * Provides primary Drupal hook implementations.
 *
 * @author  Jeremy Sullivan ("jersu", http://drupal.org/user/47878)
 */

/**
 * Denotes "Twilio API for PHP" minimum version number.
 */
define('twiliophp_MINIMUM_VERSION', '3.2');

/**
 * Implements hook_libraries_info()
 */
function twiliophp_libraries_info() {
  return array(
    'twilio-php' => array(
      'title' => 'Twilio API for PHP',
      'vendor url' => 'https://github.com/twilio/twiliophp',
      'download url' => 'https://github.com/twilio/twiliophp',
      'version arguments' => array(
        'file' => 'Services/Twilio.php',
        'pattern' => "/const USER_AGENT = 'twiliophp\/(.*)';/",
        'lines' => 50,
      ),
      'files' => array(
        'php' => array(
          'Services/Twilio.php',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_requirements()
 */
function twiliophp_requirements($phase) {
  $t = get_t();
  $requirements = array();

  // None of these requirements are relevant outside of runtime.
  if ($phase != 'runtime') {
    return $requirements;
  }

  $info = libraries_load('twilio-php');
  if (!$info['loaded']) {
    $requirements['twiliophp'] = array(
      'severity' => REQUIREMENT_ERROR,
      'title' => $t('Twilio API'),
      'value' => $t('Failed to load the Twilio API'),
      'description' => $t('Please make sure the Twilio API for PHP library is installed in the libraries directory. Use the drush make file for easy installation.'),
    );
  }
  else if(!$info['version'] || version_compare($info['version'], twiliophp_MINIMUM_VERSION) <= 0) {
    $requirements['twiliophp'] = array(
      'severity' => REQUIREMENT_ERROR,
      'title' => $t('Twilio API'),
      'value' => $info['version'],
      'description' => $t('Please make sure the Twilio API for PHP library installed is ' . TWILIO_MINIMUM_VERSION . ' or greater.'),
    );
  }
  else {
    global $base_url;
    $requirements['twiliophp'] = array(
      'severity' => REQUIREMENT_OK,
      'title' => $t('Twilio API'),
      'value' => $info['version'],
    );

    // Only proceed if unable to check compatibility or compatible.
    if (!isset($compatible) || $compatible) {
      // Ensure that the two required credentials have been set.
      $creds = twiliophp_config_load();
      if (!isset($creds['account_sid']) || !isset($creds['auth_token'])) {
        $requirements['twiliophp']['severity'] = REQUIREMENT_ERROR;
        $requirements['twiliophp']['description'] = $t('The required Twilio API credentials (account id and auth token) have not been set.');

        // Add link to configuration form if ui is enabled.
        if (module_exists('twiliophp_ui')) {
          $requirements['twiliophp']['description'] .= ' [' . l(t('configuration'), 'admin/config/media/twiliophp') . ']';
        }
      }
    }
  }

  return $requirements;
}

/**
 * Load the default twiliophp settings and apply variable overrides.
 *
 * @return
 *   An associative array containing twiliophp setting values.
 */
function twiliophp_config_load() {
  if (!($config = &drupal_static(__FUNCTION__))) {
    $config = ($cache = cache_get(__FUNCTION__)) ? $cache->data : array();
  }

  if (!$config) {
    $keys = array(
      'account_sid',
      'auth_token'
    );

    // Look for variables for each key and pull in the values.
    foreach ($keys as $key) {
      if (($value = variable_get('twiliophp_' . $key)) !== NULL) {
        $config[$key] = $value;
      }
    }

    cache_set(__FUNCTION__, $config);
  }

  return $config;
}


